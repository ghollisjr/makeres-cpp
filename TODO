+ make-table-pass-expr must create pass return list in a new way since
  cpp-table-pass is a function and therefore does not support return
  forms.  Modification should be very simple, just return a progn with
  the cpp-table-pass occurring prior to the return list.

- Should create eval operator which actually evaluates a form as Lisp
  first and then passes it to cpp.

+ cpp-{tab,ltab,dotab} should support uniq operator which generates a
  unique symbol for that particular target.  Should require even the
  initialization to use this form, e.g.

  (var int (uniq x) 0)

  would have (uniq x) replaced with a unique symbol, and anywhere in
  the target body the form (uniq x) would be replaced with the same
  unique symbol.  (uniq y) for example would have a different symbol
  than (uniq x), but everywhere in that target (uniq y) would evaluate
  to the same symbol.

+ cpp-tab results will use the target ID as the tree name since having
  the same name is problematic for generating efficient C++ code
  (requires copious calls to cd()).

+ Instead of push-fields, cpp-tab and cpp-ltab operators will support
  two different operators, (ofield <field-symbol>) and (fill).  The
  ofield operator will simply evaluate to the symbol being used to
  store the output field value corresponding to that field.  This is
  necessary for keeping the way tables are processed in ROOT as close
  as possible to the way makeres-cpp handles them.  The fill operator
  simply calls Fill() on the table object being produced or emulated.
  Any collapsed pass bodies will be placed wherever the (fill)
  operator occurs, and it will be assumed that any output values will
  be properly established via setting the values referred by the
  ofield operator prior to calling fill.

+ Need seamless interaction between Lisp objects and C++ code.  Could
  possibly have two separate transformations, one handling the
  interaction between Lisp objects and C++, and one actually compiling
  the table passes.

  Only support a subset of Lisp objects which can be easily used in
  C++, e.g. only support lists with real numbers so that they can be
  assumed to be std::vector<double> objects, or hash-tables can be
  std::map<> objects with a few different kinds supported.

  For now, going with single transformation.  Steps are

  1. Find (res ...) forms within body
  2. Assign gsyms to each ID
  3. Determine type information and optionally write targets in
     special format for ease of C++ reading
  4. Generate init forms reading the necessary results from disk
  5. Replace (res ...) forms within body with proper gsyms

  Compiled code with contain a cpp-table-pass form, but will not
  solely consist of it due to needing to determine type information at
  run time from Lisp.

- Finish cpp-table-pass.  Last step seems to be using TChain with
  multiple input files rather than a single TTree source.  Already
  partially working on that.

+ Write C++ methods for reading logged Lisp targets from disk.
  Histograms already can be read, but lists, hash-tables, etc. cannot.
  Some kind of communication from Lisp back to C++ will inevitably be
  required, so this must be handled in some way.

+ Either

  1. Support output to HDF5 datasets in C++

  2. Rely on root2hdf to convert ROOT datasets to HDF5, could feasibly
     be incorporated into a special cpp-table operator

  Going with 2 for now, haven't written actual code but added to
  INSTALL.txt notes

- get-bin-center using TAxis is not working as I thought it would for
  any histogram with more than one axis.  The axis needs its own index
  to find the bin center, not the global bin index.  I need to use the
  other functions to compute these indices and use them to get the bin
  centers in the write_histogram function.

+ Rename all the Get... methods to include the get or set prefix.
  Turns out it's pretty nasty to remove them since there isn't a
  separate function namespace.

+ Possibly add array type declarations, although they are not strictly
  necessary due to being able to use new[].

- May need to change the way I handle pointers or types in general
  since at the moment it seems awkward to express the difference
  between const pointers, pointers to const objects, and const
  pointers to const objects.

  Added const operator which returns the const type for a given type.

- gsym function which generates unique C++ symbols in much the same
  way that gensym does for Lisp.  Only needs to generate unique
  symbols in the context of a single program, so for readability it
  shouldn't just keep making newer and newer symbols, only as many as
  it needs.

  Could also simply return a function which would generate unique
  symbols for use in a single compilation.

- Reading & writing ROOT histograms from/to HDF5 files.

  There are two options:

  1. C++ code, so makeres-cpp will have a C++ component which will
     need to be compiled and potentially installed.

  2. Generate the code for doing this when the C++ code is compiled.
     This would entail overhead in compilation time and potentially
     needing to support more of C++ than is absolutely necessary for
     the benefit of not having to install C++ libraries to use
     makeres-cpp.

  Going with 2 for now.

- Support inclusion of C++ code blocks in addition to headers.  This
  allows libraries of C++ code to be written in Lisp-like C++ and then
  included in programs automatically whenever they are referenced.

  Functions currently supported, macros would be nice in the future.

- Remove duplicate compilation flags in the case of multiple identical
  compile flags being required by different headers.

* Functions should always be prototyped so that order of definition is
  not important.

+ Operators analogous to tab, ltab, and dotab for operations on ROOT
  and HDF5 tables via C++.

+ Extraction of results from executed program.

  This requires formatted output of results to files; e.g. mapping
  results to files and vice versa externally to the program.

  Depends on storage as well (ROOT vs. HDF5)

  Given the new logging strategy, the generally appropriate approach
  would be to have the pathname of the file depend on the target id,
  but to be placed in the work directory.  cpptrans will need to do
  this.

  However, since histograms are already supported by normal logging,
  perhaps histograms should be treated differently.  Histograms could
  be initially saved in files in the work directory, but in the final
  computation of the results would be read from the temporary file and
  then the temporary file would be removed.  A subsequent call to
  setresfn would then save the histogram in its own log directory.

  ROOT TTrees might be best left in the work directory to be
  consistent with the way tables are currently handled.

- Execution of compiled program via external-program:run

- Compilation of source code via external-program:run

- Full program source code generation to file

- Significant subset of the basic C++ operators and types

  More operators and structures will be added incrementally.

- Header management which defines the operators supplied by each
  header so that includes can be calculated by the terms used in the
  program.

- Add copyright information to code and the COPYRIGHT file for GPL
